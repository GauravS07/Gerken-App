{"ast":null,"code":"import { fields, presets } from '../formdata';\nimport * as i0 from \"@angular/core\";\nexport let FormvalidationService = /*#__PURE__*/(() => {\n  class FormvalidationService {\n    constructor() {\n      this.fields = fields;\n      this.presets = presets;\n    }\n\n    validateBase(input, field) {\n      console.log('validateBase of ' + input['value']);\n\n      if (input['value'].length < field.minlength) {\n        return false;\n      }\n\n      var exclude = field.exclude.split('|');\n\n      for (let i = 0; i < exclude.length; i++) {\n        if (exclude[i] == input['value']) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    validateConnected(inputA, inputB, fieldA, fieldB) {\n      console.log('validateConnected of ' + inputA + ' and ' + inputB);\n\n      if (fieldA.type == 'password') {\n        if (inputA == inputB) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        if (inputA != '' || inputB != '') {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n\n    validateEmail(input, field) {\n      console.log('validateEmail of ' + input['value']);\n      var result = true;\n      result = this.validateBase(input, field);\n      var emailCheck = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;\n\n      if (!result) {\n        return result;\n      } else {\n        result = emailCheck.test(input['value']);\n      }\n\n      return result;\n    }\n\n    validateNumber(input, field) {\n      console.log('validateNumber of ' + input['value']);\n      var result = true;\n      result = this.validateBase(input, field);\n      var reg = /^\\d+$/;\n\n      if (!result) {\n        return result;\n      } else {\n        result = reg.test(input['value']);\n      }\n\n      return result;\n    }\n\n    validateText(input, field) {\n      console.log('validateText of ' + input['value']);\n      var result = true;\n      result = this.validateBase(input, field);\n      return result;\n    }\n\n    validatePhone(input, field) {\n      console.log('validatePhone of ' + input['value']);\n      var result = true;\n      result = this.validateBase(input, field);\n\n      if (!result) {\n        return result;\n      } else {\n        result = this.validateNumber(input, field);\n      }\n\n      return result;\n    }\n\n    validatePlz(input, field) {\n      console.log('validatePlz of ' + input['value']);\n      var result = true;\n      result = this.validateBase(input, field);\n\n      if (!result) {\n        return result;\n      } else {\n        result = this.validateNumber(input, field);\n      }\n\n      return result;\n    }\n\n    validateDate(input, field) {\n      console.log('validateDate of ' + input['value']);\n      var result = true;\n      var additional = field.additional.split('|');\n      var max = parseInt(additional[0]);\n      console.log(input);\n      console.log('Max: ' + max);\n      var date = new Date(input['value']);\n      var ts = date.getTime();\n      console.log(ts);\n      var datum = new Date();\n      var heute1 = [datum.getDate(), datum.getMonth() + 1, datum.getFullYear()];\n      var today = new Date(heute1[2], heute1[1] - 1, heute1[0]).getTime();\n      console.log(today);\n\n      if (ts > today) {\n        result = false;\n      } else {\n        var diff = (today - ts) / (1000 * 365 * 24 * 60 * 60);\n        console.log('Difference: ' + diff);\n\n        if (additional[1]) {\n          var min = parseInt(additional[1]);\n          console.log('Max: ' + max);\n\n          if (diff < min || diff > max) {\n            result = false;\n          }\n        } else {\n          if (diff > max) {\n            result = false;\n          }\n        }\n      }\n\n      return result;\n    }\n\n    validateCheckbox(input, field) {\n      console.log('validateCheckbox of ' + input['value']);\n      var result = true;\n      return result;\n    }\n\n    validateForm(input) {\n      console.log('validateForm');\n      var data = JSON.parse(input);\n      console.log(data);\n      var final = true;\n      var reject = Array();\n      var connections = Array(); //console.log(data.length);\n\n      var objectArray = Object.entries(data);\n      objectArray.forEach(([key, value]) => {\n        //for (let i = 0; i < data.length; i++) {\n        var feld = value;\n        var field = this.findField(feld['name']);\n        console.log(field);\n        var result = false;\n\n        if (field.type == 'email') {\n          result = this.validateEmail(feld, field);\n        }\n\n        if (field.type == 'text') {\n          result = this.validateText(feld, field);\n        }\n\n        if (field.type == 'number') {\n          result = this.validateNumber(feld, field);\n        }\n\n        if (field.type == 'phone') {\n          result = this.validatePhone(feld, field);\n        }\n\n        if (field.type == 'plz') {\n          result = this.validatePlz(feld, field);\n        }\n\n        if (field.type == 'date') {\n          result = this.validateDate(feld, field);\n        }\n\n        console.log('a');\n\n        if (field.connected != '') {\n          connections.push([feld, field]);\n        }\n\n        if (result = false) {\n          final = false;\n          reject.push(feld['name']);\n        } //}\n\n      });\n      console.log(connections);\n\n      for (let j = 0; j < connections.length; j++) {\n        var pair = Array();\n        pair.push(connections[j]);\n        var search = pair[0][1].connected;\n\n        for (let j2 = 0; j2 < connections.length; j2++) {\n          console.log('Connections Name: ' + connections[j2][1].name + ', Search: ' + search);\n\n          if (connections[j2][1].name == search) {\n            pair.push(connections[j2]);\n          }\n        } //Das Paar sollte nun vollstÃ¤ndig sein.\n\n\n        console.log('Pair');\n        console.log(pair);\n        var result = this.validateConnected(pair[0][0], pair[1][0], pair[0][1], pair[1][1]);\n\n        if (result = false) {\n          final = false;\n          reject.push(pair[0][0]['name']);\n          reject.push(pair[1][0]['name']);\n        }\n      }\n\n      return final;\n    }\n\n    validatePassword(input) {\n      console.log('validatePassword of ' + input['value']); //-1 invalid 1 valid (everything over 1 equals higher password strength)\n\n      var result = -1;\n\n      if (input['value'].length > 4) {\n        result = 1;\n      }\n\n      return result;\n    }\n\n    findField(input) {\n      var fields = this.fields;\n\n      for (let i = 0; i < fields.length; i++) {\n        var ele = fields[i];\n\n        if (ele.name == input) {\n          return ele;\n        }\n      }\n    }\n\n    show_source() {\n      console.log(this.fields);\n    }\n\n    getAge(value) {\n      console.log('getAge of ' + value);\n      var date = new Date(value);\n      var ts = date.getTime();\n      console.log(ts);\n      var datum = new Date();\n      var heute1 = [datum.getDate(), datum.getMonth() + 1, datum.getFullYear()];\n      var today = new Date(heute1[2], heute1[1] - 1, heute1[0]).getTime();\n      console.log(today);\n      var diff = (today - ts) / (1000 * 365 * 24 * 60 * 60);\n      return diff;\n    }\n\n    onchangeNum(value) {\n      //console.log('onchangeNum');\n      return value.replace(/[^\\d]/g, '');\n    }\n\n    onchangeLower(value) {\n      //console.log('onchangeNum');\n      return value.toLowerCase();\n    }\n\n    onchangeNoNum(value) {\n      //console.log('onchangeNoNum');\n      return value.replace(/[^a-zA-Z]/g, '');\n    }\n\n    generateInput(eingabe) {\n      var result = '';\n\n      for (let i = 0; i < eingabe.length; i++) {\n        if (result == '') {\n          result = '{\"' + i + '\":{\"name\":\"' + eingabe[i][0] + '\", \"value\":\"' + eingabe[i][1] + '\"}';\n        } else {\n          result += ',\"' + i + '\":{\"name\":\"' + eingabe[i][0] + '\", \"value\":\"' + eingabe[i][1] + '\"}';\n        }\n      }\n\n      result += '}';\n      console.log(result);\n      return result;\n    }\n\n    getPresets(input) {\n      //console.log(this.presets);\n      var presets = this.presets;\n      var result;\n\n      for (let i = 0; i < presets.length; i++) {\n        if (input == presets[i].name) {\n          result = presets[i];\n        }\n      }\n\n      return result;\n    }\n\n    implementPresets(preset_name, id) {\n      console.log('implement Presets for ' + id + ', load from ' + preset_name);\n      var ele_html = document.getElementById(id);\n      console.log(ele_html.tagName);\n      ele_html.innerHTML = '';\n      var preset = this.getPresets(preset_name);\n      var objectArray = Object.entries(preset.options);\n      objectArray.forEach(([key, value]) => {\n        var option = document.createElement('option');\n        option.innerHTML = value.value;\n\n        if (ele_html.tagName != 'DATALIST') {\n          var raw = value.data_attributes; //console.log(raw);\n\n          if (raw != '' && raw) {\n            var additional = value.data_attributes.split('|');\n\n            for (let j = 0; j < additional.length; j++) {\n              var name = additional[j].split(':')[0];\n              var wert = additional[j].split(':')[1];\n              option.setAttribute(name, wert);\n            }\n          }\n        }\n\n        ele_html.appendChild(option);\n      });\n    }\n\n    adjustInput(id, type) {\n      var ele = document.getElementById(id);\n\n      if (ele.name == 'postleitzahl' || id == 'postleitzahl') {\n        ele.maxLength = 5;\n      }\n\n      var env = this;\n\n      if (type == 'numbers') {\n        ele.addEventListener('input', function (event) {\n          this.value = env.onchangeNum(this.value);\n        });\n      }\n\n      if (type == 'nonumbers') {\n        ele.addEventListener('input', function (event) {\n          this.value = env.onchangeNoNum(this.value);\n        });\n      }\n\n      if (type == 'lower') {\n        ele.addEventListener('input', function (event) {\n          this.value = env.onchangeLower(this.value);\n        });\n      }\n    }\n\n    generellAdjust(input) {\n      for (let i = 0; i < input.length; i++) {\n        var field = this.findField(input[i]);\n\n        if (document.getElementById(input[i])) {\n          this.adjustInput(input[i], field.listener);\n        }\n      }\n    }\n\n  }\n\n  FormvalidationService.Éµfac = function FormvalidationService_Factory(t) {\n    return new (t || FormvalidationService)();\n  };\n\n  FormvalidationService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: FormvalidationService,\n    factory: FormvalidationService.Éµfac,\n    providedIn: 'root'\n  });\n  return FormvalidationService;\n})();","map":null,"metadata":{},"sourceType":"module"}